#include <rclcpp/rclcpp.hpp>
#include <geometry_msgs/msg/point.hpp>
#include <Eigen/Dense>
#include <iostream>
#include <vector>

class PointExtractionAndTransformation : public rclcpp::Node
{
public:
    PointExtractionAndTransformation() : Node("point_extraction_and_transformation")
    {
        RCLCPP_INFO(this->get_logger(), "Point Extraction and Transformation Node started.");

        std::vector<Eigen::Vector3d> detected_world_points{
            // 3D Camera Points
            {0.112, 0.085, 0.463},
            {0.083, 0.086, 0.467},
            {0.053, 0.086, 0.471},
            {0.023, 0.087, 0.475},
            {-0.006, 0.088, 0.479},
            {-0.036, 0.089, 0.484},
            {-0.065, 0.089, 0.488},
            {0.112, 0.056, 0.467},
            {0.083, 0.056, 0.471},
            {0.053, 0.057, 0.476},
            {0.024, 0.057, 0.480},
            {-0.006, 0.058, 0.484},
            {-0.036, 0.059, 0.488},
            {-0.066, 0.060, 0.493},
            {0.112, 0.026, 0.471},
            {0.082, 0.026, 0.476},
            {0.053, 0.027, 0.480},
            {0.023, 0.028, 0.484},
            {-0.006, 0.029, 0.488},
            {-0.036, 0.029, 0.493},
            {-0.066, 0.030, 0.497},
            {0.112, -0.004, 0.476},
            {0.082, -0.003, 0.480},
            {0.053, -0.003, 0.484},
            {0.023, -0.002, 0.488},
            {-0.007, -0.001, 0.493},
            {-0.036, -0.000, 0.497},
            {-0.066, 0.000, 0.501},
            {0.112, -0.033, 0.480},
            {0.082, -0.033, 0.485},
            {0.053, -0.032, 0.489},
            {0.023, -0.032, 0.493},
            {-0.006, -0.031, 0.497},
            {-0.036, -0.030, 0.502},
            {-0.066, -0.029, 0.506},
            {0.112, -0.063, 0.485},
            {0.082, -0.062, 0.489},
            {0.053, -0.062, 0.493},
            {0.023, -0.061, 0.497},
            {-0.006, -0.060, 0.502},
            {-0.037, -0.060, 0.506},
            {-0.066, -0.059, 0.510},
            
            {0.104, 0.082, 0.446},
            {0.074, 0.083, 0.450},
            {0.045, 0.084, 0.454},
            {0.016, 0.085, 0.458},
            {-0.014, 0.085, 0.462},
            {-0.045, 0.086, 0.466},
            {-0.074, 0.086, 0.470},
            {0.104, 0.053, 0.450},
            {0.075, 0.054, 0.454},
            {0.044, 0.054, 0.458},
            {0.015, 0.055, 0.462},
            {-0.015, 0.055, 0.466},
            {-0.044, 0.056, 0.470},
            {-0.074, 0.058, 0.474},
            {0.105, 0.023, 0.454},
            {0.074, 0.024, 0.459},
            {0.045, 0.024, 0.462},
            {0.015, 0.026, 0.466},
            {-0.014, 0.026, 0.470},
            {-0.045, 0.026, 0.475},
            {-0.074, 0.027, 0.478},
            {0.104, -0.006, 0.459},
            {0.075, -0.006, 0.463},
            {0.044, -0.005, 0.467},
            {0.015, -0.004, 0.471},
            {-0.014, -0.003, 0.475},
            {-0.044, -0.003, 0.479},
            {-0.075, -0.003, 0.483},
            {0.104, -0.036, 0.463},
            {0.074, -0.036, 0.468},
            {0.045, -0.035, 0.471},
            {0.015, -0.034, 0.475},
            {-0.015, -0.034, 0.479},
            {-0.045, -0.033, 0.484},
            {-0.074, -0.032, 0.487},
            {0.104, -0.066, 0.468},
            {0.074, -0.065, 0.472},
            {0.044, -0.065, 0.476},
            {0.014, -0.063, 0.480},
            {-0.015, -0.063, 0.484},
            {-0.045, -0.062, 0.488},
            {-0.075, -0.062, 0.492},

            {0.120, 0.031, 0.686},
            {0.090, 0.032, 0.690},
            {0.061, 0.032, 0.694},
            {0.031, 0.033, 0.698},
            {0.001, 0.034, 0.702},
            {-0.029, 0.034, 0.706},
            {-0.058, 0.034, 0.710},
            {0.120, 0.001, 0.690},
            {0.090, 0.002, 0.694},
            {0.061, 0.002, 0.698},
            {0.031, 0.003, 0.702},
            {0.001, 0.004, 0.706},
            {-0.029, 0.004, 0.710},
            {-0.059, 0.005, 0.714},
            {0.120, -0.028, 0.695},
            {0.090, -0.028, 0.699},
            {0.061, -0.027, 0.702},
            {0.031, -0.026, 0.706},
            {0.001, -0.026, 0.710},
            {-0.029, -0.026, 0.714},
            {-0.058, -0.025, 0.718},
            {0.120, -0.058, 0.699},
            {0.090, -0.057, 0.703},
            {0.061, -0.057, 0.707},
            {0.031, -0.056, 0.711},
            {0.001, -0.056, 0.715},
            {-0.029, -0.055, 0.719},
            {-0.058, -0.055, 0.723},
            {0.120, -0.087, 0.703},
            {0.090, -0.087, 0.707},
            {0.061, -0.087, 0.711},
            {0.031, -0.086, 0.715},
            {0.001, -0.085, 0.719},
            {-0.028, -0.085, 0.723},
            {-0.058, -0.084, 0.727},
            {0.120, -0.117, 0.708},
            {0.090, -0.117, 0.711},
            {0.061, -0.116, 0.715},
            {0.031, -0.116, 0.719},
            {0.001, -0.115, 0.723},
            {-0.029, -0.114, 0.727},
            {-0.058, -0.114, 0.731},

            {0.127, 0.037, 0.560},
            {0.097, 0.037, 0.564},
            {0.067, 0.038, 0.568},
            {0.038, 0.038, 0.572},
            {0.008, 0.039, 0.576},
            {-0.022, 0.039, 0.580},
            {-0.051, 0.040, 0.584},
            {0.127, 0.007, 0.564},
            {0.097, 0.007, 0.568},
            {0.068, 0.008, 0.572},
            {0.038, 0.009, 0.576},
            {0.008, 0.009, 0.580},
            {-0.022, 0.010, 0.584},
            {-0.051, 0.010, 0.588},
            {0.127, -0.023, 0.569},
            {0.097, -0.022, 0.573},
            {0.068, -0.022, 0.577},
            {0.038, -0.021, 0.581},
            {0.008, -0.021, 0.584},
            {-0.021, -0.020, 0.589},
            {-0.051, -0.020, 0.592},
            {0.127, -0.052, 0.573},
            {0.098, -0.052, 0.577},
            {0.068, -0.051, 0.581},
            {0.038, -0.051, 0.585},
            {0.008, -0.050, 0.589},
            {-0.021, -0.050, 0.593},
            {-0.051, -0.049, 0.597},
            {0.127, -0.082, 0.577},
            {0.097, -0.082, 0.581},
            {0.068, -0.081, 0.585},
            {0.038, -0.081, 0.589},
            {0.008, -0.080, 0.593},
            {-0.021, -0.080, 0.597},
            {-0.051, -0.079, 0.601},
            {0.127, -0.112, 0.582},
            {0.098, -0.111, 0.586},
            {0.068, -0.111, 0.589},
            {0.038, -0.110, 0.593},
            {0.008, -0.110, 0.598},
            {-0.021, -0.109, 0.602},
            {-0.051, -0.109, 0.606}
        };

        // Ask the user to enter the corresponding real-world coordinates
        std::vector<Eigen::Vector3d> real_world_points ={
            // Row 1 (bottom row of the checkerboard, lower layer)
            {0.094, 0.234, 0.002},  // bottom-right corner
            {0.064, 0.234, 0.002},
            {0.034, 0.234, 0.002},
            {0.004, 0.234, 0.002},
            {-0.026, 0.234, 0.002},
            {-0.056, 0.234, 0.002},
            {-0.086, 0.234, 0.002},  // bottom-left corner

            // Row 2 (y + 0.03)
            {0.094, 0.264, 0.002},
            {0.064, 0.264, 0.002},
            {0.034, 0.264, 0.002},
            {0.004, 0.264, 0.002},
            {-0.026, 0.264, 0.002},
            {-0.056, 0.264, 0.002},
            {-0.086, 0.264, 0.002},

            // Row 3 (y + 0.03)
            {0.094, 0.294, 0.002},
            {0.064, 0.294, 0.002},
            {0.034, 0.294, 0.002},
            {0.004, 0.294, 0.002},
            {-0.026, 0.294, 0.002},
            {-0.056, 0.294, 0.002},
            {-0.086, 0.294, 0.002},

            // Row 4 (y + 0.03)
            {0.094, 0.324, 0.002},
            {0.064, 0.324, 0.002},
            {0.034, 0.324, 0.002},
            {0.004, 0.324, 0.002},
            {-0.026, 0.324, 0.002},
            {-0.056, 0.324, 0.002},
            {-0.086, 0.324, 0.002},

            // Row 5 (y + 0.03)
            {0.094, 0.354, 0.002},
            {0.064, 0.354, 0.002},
            {0.034, 0.354, 0.002},
            {0.004, 0.354, 0.002},
            {-0.026, 0.354, 0.002},
            {-0.056, 0.354, 0.002},
            {-0.086, 0.354, 0.002},

            // Row 6 (y + 0.03)
            {0.094, 0.384, 0.002},  // top-right corner
            {0.064, 0.384, 0.002},
            {0.034, 0.384, 0.002},
            {0.004, 0.384, 0.002},
            {-0.026, 0.384, 0.002},
            {-0.056, 0.384, 0.002},
            {-0.086, 0.384, 0.002},  // top-left corner

            // Upper Layer (new layer, z + 0.015)

            // Row 7 (bottom row of the upper layer, z + 0.015)
            {0.094, 0.234, 0.017},  // bottom-right corner
            {0.064, 0.234, 0.017},
            {0.034, 0.234, 0.017},
            {0.004, 0.234, 0.017},
            {-0.026, 0.234, 0.017},
            {-0.056, 0.234, 0.017},
            {-0.086, 0.234, 0.017},  // bottom-left corner of upper layer

            // Row 8 (y + 0.03)
            {0.094, 0.264, 0.017},
            {0.064, 0.264, 0.017},
            {0.034, 0.264, 0.017},
            {0.004, 0.264, 0.017},
            {-0.026, 0.264, 0.017},
            {-0.056, 0.264, 0.017},
            {-0.086, 0.264, 0.017},

            // Row 9 (y + 0.03)
            {0.094, 0.294, 0.017},
            {0.064, 0.294, 0.017},
            {0.034, 0.294, 0.017},
            {0.004, 0.294, 0.017},
            {-0.026, 0.294, 0.017},
            {-0.056, 0.294, 0.017},
            {-0.086, 0.294, 0.017},

            // Row 10 (y + 0.03)
            {0.094, 0.324, 0.017},
            {0.064, 0.324, 0.017},
            {0.034, 0.324, 0.017},
            {0.004, 0.324, 0.017},
            {-0.026, 0.324, 0.017},
            {-0.056, 0.324, 0.017},
            {-0.086, 0.324, 0.017},

            // Row 11 (y + 0.03)
            {0.094, 0.354, 0.017},
            {0.064, 0.354, 0.017},
            {0.034, 0.354, 0.017},
            {0.004, 0.354, 0.017},
            {-0.026, 0.354, 0.017},
            {-0.056, 0.354, 0.017},
            {-0.086, 0.354, 0.017},

            // Row 12 (y + 0.03)
            {0.094, 0.384, 0.017},  // top-right corner of the upper layer
            {0.064, 0.384, 0.017},
            {0.034, 0.384, 0.017},
            {0.004, 0.384, 0.017},
            {-0.026, 0.384, 0.017},
            {-0.056, 0.384, 0.017},
            {-0.086, 0.384, 0.017},  // top-left corner of upper layer

            // far camera with height 722mm
            // Row 1 (bottom row of the checkerboard)
            {0.094, 0.416, 0.002},  // bottom-right corner
            {0.064, 0.416, 0.002},
            {0.034, 0.416, 0.002},
            {0.004, 0.416, 0.002},
            {-0.026, 0.416, 0.002},
            {-0.056, 0.416, 0.002},
            {-0.086, 0.416, 0.002},  // bottom-left corner

            // Row 2 (y + 0.03)
            {0.094, 0.446, 0.002},
            {0.064, 0.446, 0.002},
            {0.034, 0.446, 0.002},
            {0.004, 0.446, 0.002},
            {-0.026, 0.446, 0.002},
            {-0.056, 0.446, 0.002},
            {-0.086, 0.446, 0.002},

            // Row 3 (y + 0.03)
            {0.094, 0.476, 0.002},
            {0.064, 0.476, 0.002},
            {0.034, 0.476, 0.002},
            {0.004, 0.476, 0.002},
            {-0.026, 0.476, 0.002},
            {-0.056, 0.476, 0.002},
            {-0.086, 0.476, 0.002},

            // Row 4 (y + 0.03)
            {0.094, 0.506, 0.002},
            {0.064, 0.506, 0.002},
            {0.034, 0.506, 0.002},
            {0.004, 0.506, 0.002},
            {-0.026, 0.506, 0.002},
            {-0.056, 0.506, 0.002},
            {-0.086, 0.506, 0.002},

            // Row 5 (y + 0.03)
            {0.094, 0.536, 0.002},
            {0.064, 0.536, 0.002},
            {0.034, 0.536, 0.002},
            {0.004, 0.536, 0.002},
            {-0.026, 0.536, 0.002},
            {-0.056, 0.536, 0.002},
            {-0.086, 0.536, 0.002},

            // Row 6 (y + 0.03)
            {0.094, 0.566, 0.002},  // top-right corner
            {0.064, 0.566, 0.002},
            {0.034, 0.566, 0.002},
            {0.004, 0.566, 0.002},
            {-0.026, 0.566, 0.002},
            {-0.056, 0.566, 0.002},
            {-0.086, 0.566, 0.002},  // top-left corner

            // Row 1 for the new points
            {0.094, 0.416, 0.002},  // bottom-right corner
            {0.064, 0.416, 0.002},
            {0.034, 0.416, 0.002},
            {0.004, 0.416, 0.002},
            {-0.026, 0.416, 0.002},
            {-0.056, 0.416, 0.002},
            {-0.086, 0.416, 0.002},  // bottom-left corner

            // Row 2 (y + 0.03)
            {0.094, 0.446, 0.002},
            {0.064, 0.446, 0.002},
            {0.034, 0.446, 0.002},
            {0.004, 0.446, 0.002},
            {-0.026, 0.446, 0.002},
            {-0.056, 0.446, 0.002},
            {-0.086, 0.446, 0.002},

            // Row 3 (y + 0.03)
            {0.094, 0.476, 0.002},
            {0.064, 0.476, 0.002},
            {0.034, 0.476, 0.002},
            {0.004, 0.476, 0.002},
            {-0.026, 0.476, 0.002},
            {-0.056, 0.476, 0.002},
            {-0.086, 0.476, 0.002},

            // Row 4 (y + 0.03)
            {0.094, 0.506, 0.002},
            {0.064, 0.506, 0.002},
            {0.034, 0.506, 0.002},
            {0.004, 0.506, 0.002},
            {-0.026, 0.506, 0.002},
            {-0.056, 0.506, 0.002},
            {-0.086, 0.506, 0.002},

            // Row 5 (y + 0.03)
            {0.094, 0.536, 0.002},
            {0.064, 0.536, 0.002},
            {0.034, 0.536, 0.002},
            {0.004, 0.536, 0.002},
            {-0.026, 0.536, 0.002},
            {-0.056, 0.536, 0.002},
            {-0.086, 0.536, 0.002},

            // Row 6 (y + 0.03)
            {0.094, 0.566, 0.002},  // top-right corner
            {0.064, 0.566, 0.002},
            {0.034, 0.566, 0.002},
            {0.004, 0.566, 0.002},
            {-0.026, 0.566, 0.002},
            {-0.056, 0.566, 0.002},
            {-0.086, 0.566, 0.002}  // top-left corner
        };

        // Calculate the transformation (rotation and translation)
        calculateTransformation(detected_world_points, real_world_points);
    }

private:

    void calculateTransformation(const std::vector<Eigen::Vector3d>& detected_points_3d, 
                                 const std::vector<Eigen::Vector3d>& real_world_points)
    {
        if (detected_points_3d.size() != real_world_points.size())
        {
            RCLCPP_ERROR(this->get_logger(), "The number of detected points and real-world points must be the same.");
            return;
        }

        // Compute the cross-covariance matrix
        Eigen::Matrix3d H = Eigen::Matrix3d::Zero();
        for (size_t i = 0; i < detected_points_3d.size(); ++i)
        {
            H += detected_points_3d[i] * real_world_points[i].transpose();
        }

        // Perform SVD on the cross-covariance matrix
        Eigen::JacobiSVD<Eigen::Matrix3d> svd(H, Eigen::ComputeFullU | Eigen::ComputeFullV);
        Eigen::Matrix3d U = svd.matrixU();
        Eigen::Matrix3d V = svd.matrixV();

        // Calculate the rotation matrix
        Eigen::Matrix3d R = V * U.transpose();

        // Ensure a proper rotation matrix by checking determinant (if necessary)
        if (R.determinant() < 0)
        {
            V.col(2) *= -1;
            R = V * U.transpose();
        }

        // Calculate the translation vector
        Eigen::Vector3d t = Eigen::Vector3d::Zero();
        for (size_t i = 0; i < detected_points_3d.size(); ++i)
        {
            t += (real_world_points[i] - R * detected_points_3d[i]);
        }
        t /= detected_points_3d.size();

        // Format the rotation matrix for logging
        Eigen::IOFormat CleanFmt(3, 0, ", ", "\n", "[", "]");
        std::stringstream ss;
        ss << R.format(CleanFmt);

        // Output the results
        RCLCPP_INFO(this->get_logger(), "Estimated Rotation Matrix:\n%s", ss.str().c_str());
        RCLCPP_INFO(this->get_logger(), "Estimated Translation Vector: x: %.3f, y: %.3f, z: %.3f", t.x(), t.y(), t.z());
    
        // Convert rotation matrix to roll, pitch, and yaw (RPY) using Eigen
        Eigen::Vector3d rpy = R.eulerAngles(0,2,1);  // roll, pitch, yaw

        // Output the RPY values
        RCLCPP_INFO(this->get_logger(), "Estimated RPY (radians): Roll: %.5f, Pitch: %.5f, Yaw: %.5f", 
                    rpy[0], rpy[1], rpy[2]);

        // Convert RPY back to rotation matrix to verify correctness
        Eigen::Matrix3d R_from_rpy;
        R_from_rpy = Eigen::AngleAxisd(rpy[0], Eigen::Vector3d::UnitX()) *  // Yaw
                    Eigen::AngleAxisd(rpy[1], Eigen::Vector3d::UnitY()) *  // Pitch
                    Eigen::AngleAxisd(rpy[2], Eigen::Vector3d::UnitZ());   // Roll

        // Output the rotation matrix from RPY for comparison
        RCLCPP_INFO(this->get_logger(), "Rotation Matrix from RPY:\n[%f, %f, %f]\n[%f, %f, %f]\n[%f, %f, %f]",
                    R_from_rpy(0, 0), R_from_rpy(0, 1), R_from_rpy(0, 2),
                    R_from_rpy(1, 0), R_from_rpy(1, 1), R_from_rpy(1, 2),
                    R_from_rpy(2, 0), R_from_rpy(2, 1), R_from_rpy(2, 2));
        
        // Check if the original rotation matrix matches the matrix obtained from RPY
        if (R.isApprox(R_from_rpy, 1e-5))
        {
            RCLCPP_INFO(this->get_logger(), "The rotation matrix matches the one obtained from RPY.");
        }
        else
        {
            RCLCPP_WARN(this->get_logger(), "The rotation matrix does not match the one obtained from RPY.");
        }
    }
};

int main(int argc, char* argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<PointExtractionAndTransformation>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}


